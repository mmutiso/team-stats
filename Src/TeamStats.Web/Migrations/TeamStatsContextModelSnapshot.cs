// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamStats.Web.Models;

namespace TeamStats.Web.Migrations
{
    [DbContext(typeof(TeamStatsContext))]
    partial class TeamStatsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("TeamStats.Web.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_recorded");

                    b.Property<DateTime>("ForDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("for_date");

                    b.Property<string>("RecordedBy")
                        .HasColumnType("text")
                        .HasColumnName("recorded_by");

                    b.HasKey("Id")
                        .HasName("pk_attendances");

                    b.ToTable("attendances");
                });

            modelBuilder.Entity("TeamStats.Web.Models.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_registered");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_clubs");

                    b.ToTable("clubs");
                });

            modelBuilder.Entity("TeamStats.Web.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("club_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.HasIndex("ClubId")
                        .HasDatabaseName("ix_people_club_id");

                    b.ToTable("people");
                });

            modelBuilder.Entity("TeamStats.Web.Models.PlayerAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AttendanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("attendance_id");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.HasKey("Id")
                        .HasName("pk_player_attendances");

                    b.HasIndex("AttendanceId")
                        .HasDatabaseName("ix_player_attendances_attendance_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_player_attendances_player_id");

                    b.ToTable("player_attendances");
                });

            modelBuilder.Entity("TeamStats.Web.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid")
                        .HasColumnName("club_id");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_registered");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("ClubId")
                        .HasDatabaseName("ix_teams_club_id");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("TeamStats.Web.Models.TeamMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTime?>("DateRemoved")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_removed");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("pk_team_memberships");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_team_memberships_player_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_memberships_team_id");

                    b.ToTable("team_memberships");
                });

            modelBuilder.Entity("TeamStats.Web.Models.Person", b =>
                {
                    b.HasOne("TeamStats.Web.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .HasConstraintName("fk_people_clubs_club_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("TeamStats.Web.Models.PlayerAttendance", b =>
                {
                    b.HasOne("TeamStats.Web.Models.Attendance", "Attendance")
                        .WithMany()
                        .HasForeignKey("AttendanceId")
                        .HasConstraintName("fk_player_attendances_attendances_attendance_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamStats.Web.Models.Person", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_player_attendances_people_player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TeamStats.Web.Models.Team", b =>
                {
                    b.HasOne("TeamStats.Web.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .HasConstraintName("fk_teams_clubs_club_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("TeamStats.Web.Models.TeamMembership", b =>
                {
                    b.HasOne("TeamStats.Web.Models.Person", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("fk_team_memberships_people_player_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamStats.Web.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("fk_team_memberships_teams_team_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
